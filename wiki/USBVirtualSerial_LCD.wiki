#summary USB Virtual Serial to HD44780 Character LCD Interface

The latest version of this firmware is available in the latest [http://code.google.com/p/micropendous/downloads/list Micropendous Distribution] or via [http://code.google.com/p/micropendous/source/checkout SVN] in the `/Micropendous/Firmware/USBVirtualSerial_LCD ` directory.

*Purpose:* Display text on a [http://en.wikipedia.org/wiki/HD44780_Character_LCD HD44780] character LCD display.

*Source Code:* [http://code.google.com/p/micropendous/source/browse/trunk/Micropendous/Firmware/USBVirtualSerial_LCD View] or [http://www.Micropendous.org/Distribution Download]

*Targets:* [Micropendous1], [Micropendous2], [Micropendous3], [Micropendous4] or any USB AVR based hardware

*USB Mode:* Device-mode enumerating as USB Virtual Serial Port 

*Status:* _Working_

= Uasge =

Compile and load the USBVirtualSerial_LCD firmware onto your USB AVR by following the [ProgramAndTest] tutorial.

The HD44780 LCD pictured below is a [http://www.lumex.com/pdf/LCM-S01602DTR+M.pdf Lumex LCM-S01602DTR].  It can be purchased from [http://search.digikey.com/scripts/DkSearch/dksus.dll?Detail&name=67-1781-ND Digi-Key.com] along with a [http://search.digikey.com/scripts/DkSearch/dksus.dll?Detail&name=609-2227-ND breakable right-angle header] which you will need to solder to the LCD.

== Connecting a Micropendous Board to a HD44780 LCD ==

To save pins the 4-bit HD44780 communication protocol is used.  You can modify the port being used and associated pins in `/Micropendous/Firmware/USBVirtualSerial-LCD/lcdconf.h`.  This is explained later.

The connections are as follows for the standard firmware:

|| Micropendous  || LCD Name || LCD Pin ||
|| GND || GND || 1 ||
|| Vcc || Vcc || 2 ||
|| GND || Contrast || 3 ||
|| PB0  || RS || 4 ||
|| PB1  || RW || 5 ||
|| PB2  || E || 6 ||
|| PB4 || Data4 || 11 ||
|| PB5 || Data5 || 12 ||
|| PB6 || Data6 || 13 ||
|| PB7 || Data7 || 14 ||

== Testing ==

Plug your Micropendous board into your PC.  Connect to the board with a serial port terminal following the [Serial] instructions.  Anything you type will echo back to the terminal and will also be displayed on the LCD.

= Firmware Design =

The goal is to use [http://ccrma.stanford.edu/courses/250a/docs/avrlib/html/index.html AVRlib's] character LCD functions with data sent to the _Virtual Serial Port_ made up of the Micropendous running modified [USBVirtualSerial] firmware.

The first step is to examine AVRlib's example code for [http://code.google.com/p/micropendous/source/browse/#svn/trunk/Micropendous/libs/avrlib/examples/lcd LCD functionality] to determine what files are needed to use the LCD code.

Files `global.h` and `lcdconf.h` must be copied to the `USBVirtualSerial_LCD` directory.

Notice that AVRlib's `rprintf.c, lcd.c, and timer.c` will need to be included for proper functionality of the LCD code.  Open the `makefile` for editing in an editor that does not add formatting.  Set `TARGET` to use the renamed code base, and `SRC` to include AVRlib's files during compilation.

{{{
TARGET = USBVirtualSerial_LCD
}}}

{{{
SRC = $(TARGET).c            \
    Descriptors.c            \
    Lib/RingBuff.c           \
    $(AVRLIB_PATH)/rprintf.c \
    $(AVRLIB_PATH)/lcd.c     \
    $(AVRLIB_PATH)/timer.c   \
...
}}}

Next `lcdconf.h` must be edited to work with the Micropendous and your particular HD44780-based LCD display.  This particular display has 2 lines of 20 characters.  Data is sent over `PortB` using a 4bit interface.  This configuration was chosen as `PortB` exists on all USB AVRs.

{{{
#ifdef LCD_PORT_INTERFACE
    #define LCD_CTRL_PORT   PORTB
    #define LCD_CTRL_DDR    DDRB
    #define LCD_CTRL_RS     0
    #define LCD_CTRL_RW     1
    #define LCD_CTRL_E      2
    // port you will use for data lines
    #define LCD_DATA_POUT   PORTB
    #define LCD_DATA_PIN    PINB
    #define LCD_DATA_DDR    DDRB
    // access mode you will use (default is 8bit unless 4bit is selected)
    #define LCD_DATA_4BIT
    ...

#define LCD_LINES           2
#define LCD_LINE_LENGTH     20

}}}


Next `global.h` must be edited to remove `F_CPU` defines, as the `makefile` defines this variable.

Next, in `main()` of `USBVirtualSerial_LCD.c`, the LCD functions must be initialized:

{{{
  lcdInit();
  rprintfInit(lcdDataWrite); // direct rprintf to LCD
  rprintf("Welcome to AVRlib!");
  lcdClear();
}}}

Finally, while data from the host is in the input buffer, send it to the LCD and back to the host.  Make sure characters past the end of the second line get sent back to the start.

{{{
void Main_Task(void)
{
  uint8_t tempChar = 0;   // temporary storage - unsigned 8-bit integer

  // while the buffer has elements, write them to the LCD
  while (haveData()) {
  /* Basically each character is written sequentially, first to the top line, then to the next, etc... */
    tempChar = getData(stdin);
    sendData(tempChar, stdout); // send char back for echo'ing on terminal
    rprintfChar(tempChar);
    character_count++;
    // once we hit the end of a single line, loop to next line
    if (character_count >= LCD_LINE_LENGTH) {
      character_count = 0;
      current_line++;
      // once we hit the end of the last line, loop to the first line
      if (current_line >= LCD_LINES) {
        current_line = 0;
      }
      lcdGotoXY(0, current_line);
    }
  }
}
}}}

Note that there are also some global `define`s, for `character_count` and `current_line`.

The firmware will not function unless an LCD display is connected as `lcdInit()` blocks.


= Connecting a Micropendous to a HD44780 LCD using 2 Ports =

The version that uses a full 8-bit data bus is slightly faster.  It is used on the obsolete [http://code.google.com/p/opendous/wiki/AD_Micropendous1BaseDevelopmentBoard Micropendous1-Base Development Board].

The connections are as follows:

|| Micropendous  || LCD Name || LCD Pin ||
|| GND || GND || 1 ||
|| Vcc || Vcc || 2 ||
|| GND || Contrast || 3 ||
|| PC7  || RS || 4 ||
|| PC6  || RW || 5 ||
|| PC5  || E || 6 ||
|| PB0 (^SS) || Data0 || 7 ||
|| PB1 (SCK) || Data1 || 8 ||
|| PB2 (MOSI) || Data2 || 9 ||
|| PB3 (MISO) || Data3 || 10 ||
|| PB4 || Data4 || 11 ||
|| PB5 || Data5 || 12 ||
|| PB6 || Data6 || 13 ||
|| PB7 || Data7 || 14 ||

You will need to edit `Micropendous/Firmware/USBVirtualSerial_LCD/lcdconf.h` to the following in order for USBVirtualSerial-LCD firmware to use 2 ports.  The key settings are:

{{{
#ifdef LCD_PORT_INTERFACE
  #ifndef LCD_CTRL_PORT
    // port and pins you will use for control lines
    #define LCD_CTRL_PORT   PORTC
    #define LCD_CTRL_DDR    DDRC
    #define LCD_CTRL_RS     7
    #define LCD_CTRL_RW     6
    #define LCD_CTRL_E      5
  #endif
  #ifndef LCD_DATA_POUT
    // port you will use for data lines
    #define LCD_DATA_POUT   PORTB
    #define LCD_DATA_PIN    PINB
    #define LCD_DATA_DDR    DDRB
    // access mode you will use (default is 8bit unless 4bit is selected)
    //#define LCD_DATA_4BIT
  #endif
#endif
}}}

Unlike the 1 port version `#define LCD_DATA_4BIT` needs to be commented out and the `LCD_CTRL` port settings must use PortC pins 5,6,7.