#summary something

DRAFT!

The latest version of this firmware is available in the latest [http://code.google.com/p/micropendous/downloads/list Micropendous Distribution] or via [http://code.google.com/p/micropendous/source/checkout SVN] in the `/Micropendous/Firmware/SOMETHING` directory.

*Targets*: [Micropendous1], [Micropendous2], [Micropendous3], [Micropendous4] or any USB AVR based hardware

*USB Mode*: Device-class enumerating as 

*Status*: Working


The relevant source code can be found in the latest [http://code.google.com/p/avropendous/downloads/list release] or through [http://code.google.com/p/avropendous/source/checkout SVN] in the `/AVRopendous/Firmware/USBVirtualSerial-SPI` directory.

= Introduction =

Allows you to use either a serial terminal or software that interacts with the serial port to write and read data over [http://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus SPI].  SPI is a full-duplex protocol which means each read is done simultaneously with each write.  This means that sometimes you must send random data over SPI to read the next byte.  You should therefore perform a read after each write.  Serial terminals would take care of such things automatically but custom software may need to take this under consideration.  Make sure to look over [SettingUpWindows] or [SettingUpUbuntuLinux] for instructions on installing the relevant software.  Look over [http://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus SPI] for more information on how SPI works.  Look through [USBtoSerial] which contains information on using a serial terminal with this type of firmware.

= Pinout =

|| *AVRopendous* || *SPI*        ||
|| `PB0(^SS)`    || `^CS`        ||
|| `PB1(SCK)`    || `SCK`        ||
|| `PB2(MOSI)`   || `MOSI`       ||
|| `PB3(MISO)`   || `MISO`       ||
|| `GND`         || `GND`+`AGND` ||
|| `Vcc`         || `Vcc`+`AVcc` ||



= Setup and Serial Port Usage =

[Loading_Firmware Program] an AVRopendous board with the USBVirutalSerial-I2C firmware.

See the instructions for [SerialPortUsageWindows Windows] or [SerialPortUsageLinux Linux] usage of serial ports before continuing.  You will need to be able to determine where the firmware enumerates to.  See [DevelopingFirmware] if you are unfamiliar with AVRopendous firmware development.


= Changing Settings =

USBVirtualSerialSPI firmware was implemented over standard USBtoSerial firmware.  This allows changing [http://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus SPI] parameters by altering the serial port configuration.

Changing the "Line Coding"/"bytesize" will change the SPI mode: `8 bits` = _Mode0_ (Default), `7 bits` = _Mode1_ , `6 bits` = _Mode2_ , `5 bits` = _Mode3_ .  Note that data is still sent in 8-bit bytes over SPI.

Changing "Baud-Rate" will change the SPI speed.  Defualt SPI clock speed is 8Mhz / 4 = 2MHz.  8Mhz is the device clock speed.  This is the setting at 9600 baud.  Each step up in baud-rate will _HALVE_ the clock speed: `9600` = _2Mhz_ (Default), `14400` = _1MHz_, `19200` = _500kHz_, `38400` = _250kHz_, `57600` = _125kHz_, `115200` = _62.5kHz_

Changing "Stop-Bits" determines whether data will be MSB or LSB.  If the default `one stop bit` is selected, data will be transmitted MSB first.  Otherwise LSB.

= Testing =

Testing functionality is very simple.  Connect the `MOSI` (*PB2*) and `MISO` (*PB3*) pins together to form a loopback.  Then plug in your AVRopendous, start a Terminal program such as gtkterm or !HyperTerminal, and anything you type will echo back.  See [SerialPortUsageWindows] or [SerialPortUsageLinux] for instructions on the usage of serial ports.


= Python Usage =

Here is a simple example for using USBVirtualSerial-SPI in Python.  The character `a` will be sent over SPI with the `ser.write()` command.  Note any 8-byte value can be sent in any compatible format, like `\af` for hex data.  Note that each call to `ser.write()` will cause the device to _both_ write data over SPI and read data back simultaneously.  Therefore each call to write should be accompanied by a call to read to avoid having buffering errors.  Note that sending two 8-bit bytes of data will appear over SPI as a 16-bit value.  

{{{
import serial           # for accessing the serial port on multiple platforms

ser = serial.Serial(2)  # open the 3rd serial port, COM3 (counting starts at 0) on Windows
# under Linux, find this value with dmesg look for something like  cdc_acm 2-1:1.0: ttyACM0: USB ACM device
#ser = serial.Serial('/dev/ttyACM0')

print ser               # dump all info regarding serial port being used

ser.write('a')          # write this character to the serial port as an 8-bit value
print ser.read()        # read the above data back, assuming loopback

ser.write('aa')         # write these characters to the serial port as a 16-bit value
print ser.read(2)       # read the above data back, assuming loopback

ser.close()             # release/close the serial port
}}}
http://micropendous.googlecode.com/svn/trunk/Pictures/SPILoopback_B2B3_Micropendous4.jpg