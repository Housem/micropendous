#summary Open Hardware Development Board for the AT90USB1287


Micropendous4 is an Open Hardware Development Board for Atmel's [http://www.atmel.com/dyn/products/product_card.asp?PN=AT90USB1287 AT90USB1287] USB AVR Microcontroller.  It has both a USB-miniB connector and a USB-A connector and an on-board USB switch to switch the active connector.  It also includes 128kbytes of external SRAM.

The relevant [http://www.lis.inpg.fr/realise_au_lis/kicad/ KiCAD] design files can be found in the latest [http://code.google.com/p/micropendous/downloads/list Micropendous Distribution] or via [http://code.google.com/p/micropendous/source/checkout SVN] in the `/Micropendous/Design/Micropendous4` directory.

== Pinout ==

http://micropendous.googlecode.com/svn/trunk/Pictures/Micropendous34_Pinout-Picture.jpg


== Features ==
  * Based on the [http://www.atmel.com Atmel] [http://www.atmel.com/dyn/products/product_card.asp?PN=AT90USB1287 AT90USB1287] USB AVR Microcontroller
  * USB Full Speed (12Mbit/s)
  * USB Device/Host/OTG Modes are supported
  * 124kb of available FLASH memory for your programs (4kb used by USB bootloader - stock Atmel or [http://code.google.com/p/micropendous/source/browse/trunk/Micropendous/Firmware/BootloaderDFU LUFA])
  * 8 kbytes SRAM, 4 kbytes of EEPROM, 128kbytes external SRAM ([SRAMUsage 112kbytes usable])
  * USB powered
  * 16MHz crystal (8MHz version also possible)
  * 47 General Purpose IO Pins (PE6 must be dedicated to SRAM)
  * RESET and HWB buttons to enable firmware loading over USB (no external programmer required)
  * HWB can be used as a user button for your applications
  * standard USB Mini-B and USB-A connectors
  * active USB connector can be switched
  * JTAG header for debugging or bootloader update and all JTAG pins except RESET are also accessible on the outer 0.1" headers
  * Size LxWxH (including headers): 2.84" x 0.8" x 0.6" =~ 7.2cm x 2cm x 1.5cm
  * completely OpenHardware Design, schematic/layout/!BillOfMaterials/assembly instructions available for Open Source [http://www.lis.inpg.fr/realise_au_lis/kicad/ KiCAD]
  * works with Open Source [http://www.fourwalledcubicle.com/LUFA.php LUFA] USB firmware library and Open Source [http://libusb.sourceforge.net LibUSB] software library, or with Open Source [http://pyserial.wiki.sourceforge.net/pySerial PySerial] library if using USBtoSerial or CDC based firmware.
  * [http://www.linux.org/ Linux] + [http://gcc.gnu.org/ AVR-GCC] + [http://www.fourwalledcubicle.com/LUFA.php LUFA] + [http://www.fourwalledcubicle.com/LUFA.php LUFA Bootloader] + [http://kicad.sourceforge.net KiCAD] + [http://dfu-programmer.sourceforge.net/ DFU-Programmer] allow you to develop Open Source and/or Open Hardware projects around a Micropendous4 board without ever touching proprietary software.

== !QuickNotes ==
 * *DO NOT* connect *GND* and *VCC*.  This will short your computer's USB power supply and may damage your computer and your Micropendous4
 * to start the bootloader, plug in your board and press both the RESET and HWB buttons, then release RESET, then HWB
 * Leaving the USB_CONN_Select pin open or setting it to logic High will enable the USB-miniB connector.  Setting it to logic Low or connecting it to the adjacent GND pin will enable the USB-A connector.  See "Switching Active Connector" notes below.
 * Due to the open construction of the board, do not use it on any conductive surface as it may create short circuits
 * PE2 (HWB) is pulled up to Vcc with a 47k resistor to disable the bootloader under normal operation.  This may influence your design decisions and usage of PE2.  Be careful this pin is not Low during RESET/START-UP or the board will enter the bootloader.
 * observe precautions for electrostatic sensitive components while handling the board
 * if your board has a communication error after being plugged in, press RESET
 * you may need to edit the `makefile` before compiling LUFA or Micropendous firmware demos.  The four key variables you need to be mindful of are:
{{{
MCU = at90usb1287
BOARD  = USER
F_CPU = 16000000
}}}
 * you can enable pins PF4,5,6,7 by disabling JTAG via software. Place the following code near the top of `main()`:
{{{
    /* disable JTAG to allow corresponding pins to be used */
    #if ((defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__) ||  \
            defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) ||  \
            defined(__AVR_ATmega16U4__)  || defined(__AVR_ATmega32U4__) ||  \
            defined(__AVR_ATmega32U6__)))
        // note the JTD bit must be written twice within 4 clock cycles to disable JTAG
        // you must also set the IVSEL bit at the same time, which requires IVCE to be set first
        // port pull-up resistors are enabled - PUD(Pull Up Disable) = 0
        MCUCR = (1 << JTD) | (1 << IVCE) | (0 << PUD);
        MCUCR = (1 << JTD) | (0 << IVSEL) | (0 << IVCE) | (0 << PUD);
    #endif
}}}

== Switching Active Connector ==

The *USB-B/^A* connector has two pins, one `GND`, and one connected to the USB switch control.  If the USB switch control is left open or set to logic *HIGH*, the USB-miniB connector is active (left picture below).  If it is `GND`ed or set to logic *LOW*, the USB-A connector is active (right picture below).  Both connectors share GND and VBUS.

http://micropendous.googlecode.com/svn/trunk/Pictures/Micropendous4_USB-Connector-Selection.jpg