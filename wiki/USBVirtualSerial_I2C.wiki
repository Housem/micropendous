#summary USB Virtual Serial to I2C Interface

The latest version of this firmware is available in the latest [http://code.google.com/p/micropendous/downloads/list Micropendous Distribution] or via [http://code.google.com/p/micropendous/source/checkout SVN] in the `/Micropendous/Firmware/USBVirtualSerial-I2C ` directory.

*Purpose:* Allows you to use software that interacts with a serial port to write and read data over [http://en.wikipedia.org/wiki/I2C I2C].  This firmware acts as an I2C master.  It uses [http://ccrma.stanford.edu/courses/250a/docs/avrlib/html/index.html avrlib's] [http://code.google.com/p/micropendous/source/browse/trunk/Micropendous/libs/avrlib/i2csw.c Software I2C].

*Source Code:* [http://code.google.com/p/micropendous/source/browse/trunk/Micropendous/Firmware/USBVirtualSerial-I2C View] or [http://www.Micropendous.org/Distribution Download]

*Targets:* [Micropendous1], [Micropendous2], [Micropendous3], [Micropendous4] or any USB AVR based hardware

*USB Mode:* Device-mode enumerating as USB Virtual Serial Port 

*Status:* _Working_.  Please post any problems you encounter to the [http://groups.google.com/group/Micropendous Micropendous Group].


= Usage =

Compile and load the  AVRISP firmware onto your USB AVR by following the [ProgramAndTest] tutorial.

== Pinout ==

Connections between an Micropendous board and an I2C device are as follows:

|| *Micropendous* || *I2C* ||
|| `PD0`          || `SCL` ||
|| `PD1`          || `SDA` ||
|| `VCC`          || `VCC` ||
|| `GND`          || `GND` ||

[http://en.wikipedia.org/wiki/Pull-up_resistor Pull-up] resistors on SCL and SDA are recommended but not required as the AVR's IOs are [http://en.wikipedia.org/wiki/Push%E2%80%93pull push-pull] as opposed to the [http://en.wikipedia.org/wiki/Open_drain open drain] configuration of a standard I2C IO pin.  However, this prohibits techniques such as bus arbitration.  Only I2C Master Mode is supported.

== Protocol ==

The firmware enumerates as an `USB Virutal Serial Port`.  It then waits for packets formatted according to:

Packet: <R/^W , !DeviceAddress , Sub-Address/Register , !DataLength , !DataBytesArray>
Where the bytes are as follows:
 #  byte is read/write byte, 1 is read and 0 is write
 #  byte is the proper non-RW-adjusted device address from its datasheet
 #  byte is the length of data being sent, in number of bytes
 #  byte is length of data expected to be received in number of bytes
 #  byte and later bytes are the data array to send

After processing, the firmware returns a byte which denotes the number of bytes still to be received.  For a write, this is usually 0, for a read it is at least 1 byte; the data read from an I2C device.

Make sure to read each returned byte or flush the serial buffer before continuing.

== Setup and Serial Port Usage ==

[ProgramAndTest Program] a Micropendous board with the USBVirutalSerial-I2C firmware.

See the [Serial] instructions for usage of serial ports before continuing.  You will need to be able to determine where the device enumerates to.


== Testing and Communication Examples ==

Under Windows you will need to have [http://python.org/download/releases/2.5.5/ Python 2.5.5] and [http://downloads.sourceforge.net/pyserial/pyserial-2.4.win32.exe Pyserial] installed.  Under Linux, these are already installed if you followed the [LinuxQuickStart] tutorial.

The following picture shows an I2C EEPROM and temperature sensor connected to a Micropendous board via I2C.

http://micropendous.googlecode.com/svn/trunk/Pictures/USBVirtualSerial-I2C_Picture.jpg

Included in the `/Micropendous/Firmware/USBVirtualSerial-I2C/` directory of the [http://code.google.com/p/micropendous/downloads/list Micropendous Distribution] are three [http://www.Python.org Python] scripts for communicating with a [http://search.digikey.com/scripts/DkSearch/dksus.dll?Detail&name=24AA08-I/P-ND 24AA08] [http://en.wikipedia.org/wiki/EEPROM EEPROM], a [http://search.digikey.com/scripts/DkSearch/dksus.dll?Detail&name=TC74A0-3.3VAT-ND TC74] temperature sensor, and also a script to scan all I2C addresses for devices.  More information about using the scripts can be found by running them with no parameters.
{{{
python  Test_I2C_EEPROM.py
python  Test_I2C_TC74_TempSense.py
python  Test_I2C_ScanAllAdresses.py
}}}

You can view the Python example scripts via the following links:

[http://code.google.com/p/micropendous/source/browse/trunk/Micropendous/Firmware/USBVirtualSerial-I2C/Test_I2C_EEPROM.py View Test_I2C_EEPROM.py]

[http://code.google.com/p/micropendous/source/browse/trunk/Micropendous/Firmware/USBVirtualSerial-I2C/Test_I2C_TC74_TempSense.py View Test_I2C_TC74_TempSense.py]

[http://code.google.com/p/micropendous/source/browse/trunk/Micropendous/Firmware/USBVirtualSerial-I2C/Test_I2C_ScanAllAdresses.py View Test_I2C_ScanAllAdresses.py]