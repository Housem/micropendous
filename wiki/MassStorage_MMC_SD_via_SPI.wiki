#summary Mass Storage Firmware Demo using MMC/SD Cards in SPI Mode

The latest version of this firmware is available in the latest [http://code.google.com/p/micropendous/downloads/list Micropendous Distribution] or via [http://code.google.com/p/micropendous/source/checkout SVN] in the `/Micropendous/Firmware/MassStorage_MMC_SD_via_SPI` directory.

*Purpose:* Use your USB AVR to interface to a MMC or SD card.  More likely this firmware will be used to store data onto a MMC or SD card while the board is disconnected from a host and then use the USB Mass Storage interface to read the data from a PC.  For example, a sensor logger.

*Source Code:* [http://code.google.com/p/micropendous/source/browse/trunk/Micropendous/Firmware/MassStorage_MMC_SD_via_SPI View] or [http://www.Micropendous.org/Distribution Download]

*Targets:* [Micropendous2] or any USB AVR running at 3.3V with 1kb+ SRAM connected to a MMC/SD Card via SPI

*USB Mode:* Device-mode enumerating as Mass Storage device

*Status:* _Working_


== Usage ==

Current version of this firmware must be recompiled for each new MMC or SD card you plan to use.  Need to set the number of blocks.  Format your MMC or SD card using a standard Card Reader then note the number of bytes under the device's properties.  Divide the number by 512 to get the number of pages, then open `MassStorage_MMC_SD_SPI_Mode.h` and change `#define DATAFLASH_PAGES  1986976` to the number of pages for your specific card.

Set your [Micropendous2] board's VCC_Select Jumper to 3.3V as MMC/SD cards only work at 3.3V.  If you are using an USB AVR running at 5V you will need some sort of level translator.

Now compile and load the !MassStorage_MMC_SD_via_SPI firmware onto your USB AVR by following the [ProgramAndTest] tutorial.

== Firmware Design ==

This firmware is almost an exact copy of [http://www.fourwalledcubicle.com/LUFA.php LUFA]'s !MassStorage demo with the DataFLASH code replaced by MMC and SD SPI mode code.  `DataflashManager.c/.h` is replaced with `MMC_SD_SPI.c/.h`.  MMC and SD SPI Mode functionality is taken from [http://ccrma.stanford.edu/courses/250a/docs/avrlib/html/index.html AVRlib]'s [http://code.google.com/p/micropendous/source/browse/trunk/Micropendous/libs/avrlib/mmc.c mmc.c].