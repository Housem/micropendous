#summary Open Hardware Development Board for Atmel's AT90USB1287 USB AVR

Micropendous-A is an Open Hardware Development Board for Atmel's 64-pin [http://www.atmel.com/dyn/products/product_card.asp?PN=AT90USB1287 AT90USB1287] USB AVR Microcontroller.

The relevant [http://www.lis.inpg.fr/realise_au_lis/kicad/ KiCAD] design files can be found in ~the latest [http://code.google.com/p/micropendous/downloads/list Micropendous Distribution] or via~ [http://code.google.com/p/micropendous/source/checkout SVN] in the `/Micropendous/Design/Micropendous-A` [http://code.google.com/p/micropendous/source/browse/trunk/Micropendous/Design/Micropendous-A/ directory].

http://micropendous.googlecode.com/svn/trunk/Micropendous/Design/Micropendous-A/Micropendous-A.jpg

== Pinout ==

http://micropendous.googlecode.com/svn/trunk/Micropendous/Design/Micropendous3/Micropendous3_Pinout.jpg


== Features ==

  * Based on the [http://www.atmel.com/dyn/products/product_card.asp?PN=AT90USB1287 AT90USB1287]
  * USB Full Speed (12Mbit/s)
  * USB Device and/or Host Modes supported
  * 120kb of available FLASH memory for your programs (8kb used by USB bootloader - stock Atmel or [http://code.google.com/p/micropendous/source/browse/trunk/Micropendous/Firmware/BootloaderDFU LUFA])
  * 8 kbytes SRAM and 4 kbytes of EEPROM
  * [http://www.Micropendous.org/SRAM 128kbytes External SRAM]
  * USB or externally powered and can be modified for 3.3V IO
  * 16MHz crystal
  * 47 General Purpose IO Pins operating at 5V
  * RESET and HWB buttons to enable firmware loading over USB (no external programmer required)
  * HWB can be used as a user button
  * USB-A Plug or Receptacle
  * JTAG ([http://search.digikey.com/scripts/DkSearch/dksus.dll?Detail&name=609-3243-ND Header] DIL 0.1" 5x2) for debugging or bootloader update
  * Size LxWxH (including headers): 3.2" x 0.8" x 0.6" =~ 8cm x 2cm x 1.5cm
  * completely OpenHardware Design, schematic/layout/!BillOfMaterials/assembly instructions available for Open Source [http://www.lis.inpg.fr/realise_au_lis/kicad/ KiCAD]
  * works with Open Source [http://www.fourwalledcubicle.com/LUFA.php LUFA] USB firmware library and Open Source [http://libusb.sourceforge.net LibUSB] software library, or with Open Source [http://pyserial.wiki.sourceforge.net/pySerial PySerial] library if using USBtoSerial or CDC based firmware.
  * [http://www.linux.org/ Linux] + [http://gcc.gnu.org/ AVR-GCC] + [http://www.fourwalledcubicle.com/LUFA.php LUFA] + [http://www.fourwalledcubicle.com/LUFA.php LUFA Bootloader] + [http://kicad.sourceforge.net KiCAD] + [http://dfu-programmer.sourceforge.net/ DFU-Programmer] allow you to develop Open Source and/or Open Hardware projects around a Micropendous-A without ever touching proprietary software.

== !QuickNotes ==
 * *DO NOT* connect *GND* and *VCC*.  This will short your computer's USB power supply and may damage your computer and your Micropendous-A
 * to start the bootloader, plug in your board and press both the RESET and HWB buttons, then release RESET, then HWB
 * Due to the open construction of the board, do not use it on any conductive surface as it may create short circuits
 * PE2 (HWB) is pulled up to Vcc with a 43k resistor to disable the bootloader under normal operation.  This may influence your design decisions and usage of PE2.  Be careful this pin is not Low during RESET/START-UP or the board will enter the bootloader.
 * observe precautions for electrostatic sensitive components while handling the board
 * if your board has a communication error after being plugged in, press RESET
 * you may need to edit the `makefile` before compiling Micropendous firmware demos.  The three key variables you need to be mindful of are:
{{{
MCU = at90usb1287
BOARD  = USER
F_CPU = 16000000
}}}
 * you can enable pins PF4,5,6,7 by disabling JTAG via software. Place the following code near the top of your `main()`:
{{{
    /* disable JTAG to allow corresponding pins to be used */
    #if ((defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__) ||  \
            defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) ||  \
            defined(__AVR_ATmega16U4__)  || defined(__AVR_ATmega32U4__) ||  \
            defined(__AVR_ATmega32U6__)))
        // note the JTD bit must be written twice within 4 clock cycles to disable JTAG
        // you must also set the IVSEL bit at the same time, which requires IVCE to be set first
        // port pull-up resistors are enabled - PUD(Pull Up Disable) = 0
        MCUCR = (1 << JTD) | (1 << IVCE) | (0 << PUD);
        MCUCR = (1 << JTD) | (0 << IVSEL) | (0 << IVCE) | (0 << PUD);
    #endif
}}}

== Powering the board externally ==

A Micropendous-A board can be externally powered through its VCC pin (regardless whether it is connected to a USB Host).  Simply remove the VCC=VBUS trace jumper on the underside of the board to disconnect VBUS from VCC then power the board with an external regulated 3.1V to 5V power supply through the VCC pin.

http://micropendous.googlecode.com/svn/trunk/Micropendous/Design/Micropendous3/Micropendous3_ExternalPower.jpg

== Hosting USB Devices ==

The board needs to be powered externally with a regulated 5V power supply through the VBUS pin to allow USB Hosting:

http://micropendous.googlecode.com/svn/trunk/Micropendous/Design/Micropendous3/Micropendous3_BluetoothHosting.jpg

== Removing your Micropendous-A from a Breadboard ==

Be careful when removing your Micropendous-A from a Breadboard.  Use a mini screwdriver to pry one corner, then another, then another, then start from the first, etc...  It should take you about 20 or so careful corner nudges before the Micropendous-A will separate from a breadboard.  Be careful not to damage the SRAM IC.

http://micropendous.googlecode.com/svn/trunk/Pictures/Remove_From_Breadboard_Micropendous4.jpg