#summary What is the best way to develop firmware for your Micropendous?

DRAFT!

Firmware development for the Micropendous is C/C++ and `[http://en.wikipedia.org/wiki/Make_(software) makefile]` based.  This allows you to use your favorite code editor and easily add new libraries.

There are several ways to approach firmware development and which is best depends on your experience and requirements.  Choose one of the following to begin.

== [LUFAduino] ==

Great for those with [http://www.arduino.cc Arduino] experience.  All USB Virtual Serial Port functionality is hidden behind the `Serial` class.  Built on [USBVirtualSerial_FreeRTOS].

*Advantages*
  * communicate with the board using standard Serial Port software and techniques
  * multi-tasking: several `loop()` functions can run "simultaneously"
  * mostly code-compatible with your Arduino projects
  * allows the use of delay() functions

*Disadvantages*
  * slow
  * Timer1 required by underlying code so fewer PWM channels 
  * still in development
  * requires 2kbytes+ of SRAM


== [USBVirtualSerial_FreeRTOS] ==

Program AVR directly but ignore USB functionality.  Send and receive data over the USB Virtual Serial Port using three simple functions: `haveData()`, `sendData(uint8_t)`, `getData()`.

*Advantages*
  * communicate with the board using standard Serial Port software and techniques
  * multi-tasking: several functions can run "simultaneously"
  * direct access to AVR architecture

*Disadvantages*
  * slow: about the same speed as [LUFAduino]
  * Timer1 required by underlying code so take care when using
  * requires 2kbytes+ of SRAM


== [USBVirtualSerial] ==

Program AVR directly but ignore USB functionality.  Send and receive data over the USB Virtual Serial Port using three simple functions: `haveData()`, `sendData(uint8_t)`, `getData()`.

*Advantages*
  * communicate with the board using standard Serial Port software and techniques
  * direct access to AVR architecture
  * fast

*Disadvantages*
  * must be careful not to interfere with USB functions


== [LoopBack] ==

Program AVR directly and directly control USB communication on both the host and device.

*Advantages*
  * fast

*Disadvantages*
  * requires custom host-side software such as that based on LibUSB
  * [SetupLibUSBWindows LibUSB Setup for Windows] is complicated



= !QuickStart Hierarchy Map =

  * Get Started 
   * on [LinuxQuickStart Linux]
    * [ProgramAndTestLinux Program and/or test a Micropendous board]
     * [SerialPortUsageLinux Serial Port Usage]
   * on [WindowsQuickStart Windows]
    * [ProgramAndTestWindows Program and/or test a Micropendous board]
     * [SerialPortUsageWindows Serial Port Usage]

  * Develop Firmware:
   * [FirmwareDevelopment Choose Development Complexity]
    * [LUFAduino] Use [http://www.arduino.cc Arduino] code and style
    * [USBVirtualSerial_FreeRTOS] Program AVR directly but ignore USB
    * [USBVirtualSerial] Program AVR directly and customize USB handling
    * [LoopBack] Program AVR directly and use custom USB class
     * [SetupLibUSBWindows] Setting up for [http://libusb-win32.sourceforge.net/ LibUSB-Win32] development under Windows
   * [USBVirtualSerial_ADC] Get the current value of ADC pins using serial port software
   * More firmware examples will be added soon!


== Next ==

Back to [QuickStart]