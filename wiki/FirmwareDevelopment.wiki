#summary What is the best way to develop firmware for your Micropendous?

DRAFT!

Firmware development for the Micropendous is C/C++ and [http://en.wikipedia.org/wiki/Make_(software) makefile] based.  This allows you to use your favorite code editor and easily add new libraries.

There are several ways to approach firmware development and which is best depends on your experience and requirements.  Developing projects based on USB Virtual Serial Port firmware is the easiest and most versatile option as you can use traditional Serial Port software and techniques.  Choose one of the following to begin.

= [LUFAduino] =

Great for those with [http://www.arduino.cc Arduino] experience.  All USB Virtual Serial Port functionality is hidden behind the `Serial` class.  Built on [USBVirtualSerial_FreeRTOS].

*Advantages*
  * communicate with the board using standard Serial Port software and techniques
  * multi-tasking: several `loop()` functions can run "simultaneously"
  * mostly code-compatible with your Arduino projects
  * allows the use of delay() functions

*Disadvantages*
  * slow - throughput about 12kbytes/s
  * Timer1 required by underlying code so fewer PWM channels 
  * still in development
  * requires 2kbytes+ of SRAM


= [USBVirtualSerial_FreeRTOS] =

Program AVR directly but ignore USB functionality.  Send and receive data over the USB Virtual Serial Port using three simple functions: `haveData()`, `sendData(uint8_t)`, `getData()`.

*Advantages*
  * communicate with the board using standard Serial Port software and techniques
  * multi-tasking: several functions can run "simultaneously"
  * direct access to AVR architecture

*Disadvantages*
  * slow: about the same speed as [LUFAduino]
  * Timer1 required by underlying code so take care when using
  * requires 2kbytes+ of SRAM


= [USBVirtualSerial] =

Program AVR directly but ignore USB functionality.  Send and receive data over the USB Virtual Serial Port using three simple functions: `haveData()`, `sendData(uint8_t)`, `getData()`.

*Advantages*
  * communicate with the board using standard Serial Port software and techniques
  * direct access to AVR architecture
  * fast - throughput about 16kbytes/s

*Disadvantages*
  * must be careful not to interfere with USB functions


= [LoopBack] =

Program AVR directly and directly control USB communication on both the host and device.

*Advantages*
  * very fast - throughput can approach 1000kbytes/s, see [SpeedTest]

*Disadvantages*
  * requires custom host-side software based on [http://libusb.sourceforge.net/ LibUSB].  Demo software included.
  * [SetupLibUSBWindows LibUSB Setup for Windows] is complicated



== Next ==

Back to [QuickStart]