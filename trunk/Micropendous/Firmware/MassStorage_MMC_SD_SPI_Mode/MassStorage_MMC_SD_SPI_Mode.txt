/** \file
 *
 *  This file contains special DoxyGen information for the generation of the main page and other special
 *  documentation pages. It is not a project source file.
 */
 
/** \mainpage Mass Storage Device Demo for MMC or SD memory cards in SPI mode
 *
 *  \section SSec_Compat Demo Compatibility:
 *
 *  The following table indicates what microcontrollers are compatible with this demo.
 *  Basically any USB AVR with >= 1024bytes of SRAM
 *
 *  - AT90USB1287
 *  - AT90USB1286
 *  - AT90USB647
 *  - AT90USB646
 *  - ATMEGA32U6
 *  - ATMEGA32U4
 *  - ATMEGA16U4
 *
 *  \section SSec_Info USB Information:
 *
 *  The following table gives a rundown of the USB utilization of this demo.
 *
 *  <table>
 *   <tr>
 *    <td><b>USB Mode:</b></td>
 *    <td>Device</td>
 *   </tr>
 *   <tr>
 *    <td><b>USB Class:</b></td>
 *    <td>Mass Storage Device</td>
 *   </tr>
 *   <tr> 
 *    <td><b>USB Subclass:</b></td>
 *    <td>Bulk-Only Transport</td>
 *   </tr>
 *   <tr>
 *    <td><b>Relevant Standards:</b></td>
 *    <td>USBIF Mass Storage Standard</td>
 *    <td>USB Bulk-Only Transport Standard</td>
 *    <td>SCSI Primary Commands Specification</td>
 *    <td>SCSI Block Commands Specification</td>
 *   </tr>
 *   <tr>
 *    <td><b>Usable Speeds:</b></td>
 *    <td>Full Speed Mode</td>
 *   </tr>
 *  </table>
 *
 *  \section SSec_Description Project Description: 
 *
 *  LUN Mass Storage demonstration application. This gives a simple
 *  reference application for implementing a multiple LUN USB Mass Storage
 *  device using the basic USB UFI drivers in all modern OSes (i.e. no
 *  special drivers required).
 *
 *  A MMC or SD card connected via the SPI interface will act as the storage medium.
 *
 *  Note the firmware must be recompiled for each specific memory card.
 *  
 *  On start-up the system will automatically enumerate and function as an
 *  external mass storage device which may be formatted and used in the same
 *  manner as commercial USB Mass Storage devices.
 *  	
 *  You will need to format the mass storage drives upon first run of this
 *  demonstration - as the device acts only as a data block transport between
 *  the host and the storage media, it does not matter what file system is used,
 *  as the data interpretation is performed by the host and not the USB device.
 *
 *  It is recommended you use a dedicated USB memory card reader for formatting
 *  as this firmware is very slow.
 *  
 *  The USB control endpoint is managed entirely by the library using endpoint
 *  interrupts, as the INTERRUPT_CONTROL_ENDPOINT option is enabled. This allows for
 *  the host to reset the Mass Storage device state during long transfers without
 *  the need for complicated polling logic.
 *
 *  \section SSec_Options Project Options
 *
 *  The following defines can be found in this demo, which can control the demo behaviour when defined, or changed in value.
 *
 *  <table>
 *   <tr>
 *    <td><b>Define Name:</b></td>
 *    <td><b>Location:</b></td>
 *    <td><b>Description:</b></td>
 *   </tr>
 *   <tr>
 *    <td>TOTAL_LUNS</td>
 *    <td>MassStorage.h</td>
 *    <td>Total number of Logical Units (drives) in the device. The total device capacity is shared equally between each drive
 *        - this can be set to any positive non-zero amount.</td>
 *   </tr>
 *  </table>
 */
