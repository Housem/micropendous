<chapter id="sw_proto">
    <title>Protocol Description</title>
    <para>
    The &userial; protocol is ASCII based, in order to make it easy to insert commands and to read the replies in a serial terminal emulation.
    In the following examples, lines starting with a less-than character (&lt;) are commands sent to &userial;;
    lines with a greater-than character (&gt;) are replies.
    </para>

    <para>
    All commands are case insensitive, though the replies are always uppercase.
    It is possible to specify ASCII characters instead of hex numbers.
    Those characters must be escaped by a backslash.
    </para>

    <example id="sw_eg_data"><title>Alternative data formats</title>
    <programlisting>&lt; IS12W303132P
&lt; is12w303132p
&lt; IS12W\0\1\2P</programlisting>
    </example>

    <para>
    A line must end with a carreage return '<command>\r</command>' or
    a newline '<command>\n</command>' or any combination of those two.
    </para>

    <sect1 id="sw_version">
        <title>Firmware Version request</title>
        <para>
        The software version can be queried with the '<command>V</command>' command.
        </para>
        <example id="sw_eg_version"><title>Requesting the firmware version</title>
        <programlisting>&lt; V
&gt; V&fwversion;</programlisting>
        </example>
    </sect1>

    <sect1 id="sw_i2c">
        <title>&i2c; Protocol</title>

        <sect2 id="sw_i2c_config">
            <title>&i2c; Configuration</title>
            <para>
            The only &i2c; configuration parameter so far is the clock rate.
            It is changed by using the '<command>I</command>' command, followed by the '<command>C</command>' character and the clock rate in kHz,
            expressed as a hexadecimal number.
            The reply to the configuration command is the clock rate effectively set in hardware.
            </para>
            <para>
            To query the current configuration, just send the command '<command>IC</command>'.
            The description of a &i2c; configuration command is:
            </para>

            <programlisting>IC[&lt;dd&gt;]</programlisting>
            <variablelist>
                <varlistentry>
                    <term><filename>IC</filename></term>
                    <listitem>
                        <para>
                        Start of a &i2c; configuration command.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>&lt;dd&gt;</filename></term>
                    <listitem>
                        <para>
                        The frequency of the &i2c; clock rate in kHz, expressed as a hexadecimal number.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>

            <para>
            The following example sets the &i2c; master clock frequency to 100kHz (0x64 in hexadecimal).
            </para>
            <example id="sw_eg_i2c_config"><title>Setting the &i2c; clock rate to 100kHz</title>
            <programlisting>&lt; IC64
&gt; IC0064</programlisting>
            </example>

            <para>
            On the &bumbleb; board, the frequency of the bit-bang &i2c; driver is 100Hz and cannot be changed.
            </para>
        </sect2>

        <sect2 id="sw_i2c_reads_writes">
            <title>&i2c; Reads and Writes</title>
            <para>
            A complete &i2c; transaction is written entirely on one line.
            It starts with '<command>IS</command>' (start) and ends with '<command>P</command>' (stop)
            and may contain zero or more repeated start commands ('<command>S</command>') in between.
            The general form of a &i2c; read/write command is as follows:
            <programlisting>IS&lt;aa&gt;(R|W)&lt;dd&gt;[S&lt;aa&gt;(R|W)&lt;dd&gt;&hellip;]P</programlisting>
            <variablelist>
                <varlistentry>
                    <term><filename>IS</filename></term>
                    <listitem>
                        <para>
                        &i2c; Start Command.
                        </para>
                        <para>
                        The reply to '<command>IS</command>' is '<command>IS</command>'.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>&lt;aa&gt;</filename></term>
                    <listitem>
                        <para>
                        The &i2c; slave address in a left-aligned form.
                        The last bit of the address must match the Read/Write operation:
                        1 for a Read and 0 for a Write operation
                        </para>
                        <para>
                        The reply to '&lt;aa&gt;' is '<command>A</command>' for an Acknowledge or '<command>N</command>' for a Nack.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>(R|W)</filename></term>
                    <listitem>
                        <para>
                        One character, either '<command>R</command>' or '<command>W</command>' for a Read or a Write operation.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>&lt;dd&gt;</filename></term>
                    <listitem>
                        <para>
                        The operation payload of byte count.
                        On a Read operation this number indicates the number of bytes to read from the slave.
                        On a Write operation this is a sequence of hexadecimal 8-bit values: the payload to write to the slave.
                        </para>
                        <para>
                        The reply to a Write command is one '<command>A</command>' for each byte written to the slave in case of success.
                        If the slave Nacks one byte, the transaction will be stopped (a Stop condition is put on the bus) and a '<command>N</command>' is sent to the user.
                        </para>
                        <para>
                        The reply to a Read command is the data read from the slave device.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>S</filename></term>
                    <listitem>
                        <para>
                        Repeated Start Condition. This command can be added to a command, resulting in a repeated start condition.
                        </para>
                        <para>
                        The reply to '<command>S</command>' is always '<command>S</command>'. This helps to distinguish between data bytes from different transactions.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>P</filename></term>
                    <listitem>
                        <para>
                        Stop Condition.
                        </para>
                        <para>
                        The reply to '<command>P</command>' is always '<command>P</command>'.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>

            In order to illustrate the command structure, let's write down a simple Read operation:
            <programlisting>IS&lt;aa&gt;R&lt;dd&gt;P</programlisting>
            and a simple Write operation:
            <programlisting>IS&lt;aa&gt;W&lt;dd&gt;P</programlisting>
            The following examples show the use of the commands.
            </para>

            <example id="sw_eg_write"><title>Writing 3 bytes to a slave</title>
            <programlisting>&lt; IS12W010203P
&gt; ISAAAAP</programlisting>
            </example>

            <example id="sw_eg_read"><title>Reading 5 bytes from a slave</title>
            <programlisting>&lt; IS21R05P
&gt; ISA3132333435P</programlisting>
            </example>

            <example id="sw_eg_write_read"><title>Combining write and read into one transaction</title>
            <programlisting>&lt; IS12W010203S21R05P
&gt; ISAAAASA3132333435P</programlisting>
            </example>
        </sect2>

        <sect2 id="sw_i2c_bus_clear">
            <title>&i2c; Bus Clear</title>
            <para>
            If the data line (SDA) is stuck LOW, the master should send 9 clock pulses. The device
            that held the bus LOW should release it sometime within those 9 clocks.
            <!--
            If not, then use the HW reset or cycle power to clear the bus.
            -->
            </para>
            <para>
            In &userial;, this operation is currently implemented as Start condition, followed by a general call address and a Stop condition.
            </para>

            <programlisting>IX</programlisting>
            <variablelist>
                <varlistentry>
                    <term><filename>IX</filename></term>
                    <listitem>
                        <para>
                        The &i2c; bus clear command. This command has no parameters.
                        The reply to a '<command>IX</command>' command is always <command>IX</command>.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>

            <example id="sw_eg_i2c_bus_lear"><title>&i2c; bus clear</title>
            <programlisting>&lt; IX
&gt; IX</programlisting>
            </example>
        </sect2>

        <sect2 id="sw_i2c_slave_reset">
            <title>&i2c; Slave Reset</title>
            <para>
            The &i2c; specification defines a slave reset command. This reset consists of a General Call, followed by the byte 0x06.
            &userial; does not provide a specific command for it, because the following command can be used to achieve the same effect:
            </para>
            <example id="sw_eg_i2c_slave_reset"><title>&i2c; slave reset</title>
            <programlisting>&lt; IS00W06P
&gt; ISAAP</programlisting>
            </example>
        </sect2>
    </sect1>


    <sect1 id="sw_gpio">
        <title>&gpio; Protocol</title>
        <sect2 id="sw_gpio_config">
            <title>&gpio; Configuration</title>
            <para>
            With the &gpio; configuration command it is possible to specify the I/O direction of each pin of the I/O port individually.
            </para>
            <programlisting>GC&lt;p&gt;&lt;dddddddd&gt;[&lt;p&gt;&lt;dddddddd&gt;&hellip;]</programlisting>
            <variablelist>
                <varlistentry>
                    <term><filename>GC</filename></term>
                    <listitem>
                        <para>
                        Start of a &gpio; configuration command.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>&lt;p&gt;</filename></term>
                    <listitem>
                        <para>
                        The port name. On the &userial; board, ports '<command>A</command>' and '<command>B</command>' are supported.
                        </para>
                        <para>
                        On the &bumbleb; board, ports '<command>A</command>' through '<command>D</command>' are supported.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>&lt;dddddddd&gt;</filename></term>
                    <listitem>
                        <para>
                        The direction of the pins: '<command>I</command>' for input or '<command>O</command>' for output.
                        The first character corresponds to bit 7, the last character corresponds to bit 0.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para>
            &userial; replies to a &gpio; command with the configuration that has been actuated.
            </para>

            <para>
            The following command configures the port B with pins 7,6,3,2 and inputs and pins 5,4,1,0 as outputs.
            </para>
            <example id="sw_eg_gpio_config"><title>&gpio; port B configuration</title>
            <programlisting>&lt; GCBIIOOIIOO
&gt; GCBIIOOIIOO</programlisting>
            </example>
        </sect2>

        <sect2 id="sw_gpio_read">
            <title>&gpio; Read</title>
            <para>
            The read-back of ports is simple. The port names are listed after the '<command>GR</command>' command.
            The data is returned in hexadecimal format.
            </para>
            <programlisting>GR&lt;p&gt;[&lt;p&gt;&hellip;]</programlisting>
            <variablelist>
                <varlistentry>
                    <term><filename>GR</filename></term>
                    <listitem>
                        <para>
                        Start of a &gpio; read command.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>&lt;p&gt;</filename></term>
                    <listitem>
                        <para>
                        The port name.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para>
            &userial; replies to a &gpio; command with the port number, followed by the logical value of the IO lines.
            </para>

            <para>
            For example, to read port B and A back (in this order):
            </para>
            <example id="sw_eg_gpio_read"><title>&gpio; bit read</title>
            <programlisting>&lt; GRBA
&gt; GRB24A02</programlisting>
            </example>
        </sect2>


        <sect2 id="sw_gpio_bitset">
            <title>&gpio; Bit Set</title>
            <para>
            Individual bits can be set using the '<command>GB</command>' command.
            </para>
            <programlisting>GB&lt;p&gt;&lt;dddddddd&gt;[&lt;p&gt;&lt;dddddddd&gt;&hellip;]</programlisting>
            <variablelist>
                <varlistentry>
                    <term><filename>GB</filename></term>
                    <listitem>
                        <para>
                        Start of a &gpio; set command.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>&lt;p&gt;</filename></term>
                    <listitem>
                        <para>
                        The port name.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>&lt;dddddddd&gt;</filename></term>
                    <listitem>
                        <para>
                        The data of each pin: '<command>1</command>', '<command>0</command>', to set and reset a pin,
                        '<command>F</command>' to flip the value of a bit,
                        '<command>X</command>' to leave the value of a bit unchanged.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para>
            &userial; replies to a &gpio; set command with the data read from the port, as a bit field.
            </para>

            <para>
            For example, to write data to port A and B:
            </para>
            <example id="sw_eg_gpio_bitset"><title>&gpio; bit set</title>
            <programlisting>&lt; GBA010000xxBFF00xx11
&gt; GBA01000001B10000011</programlisting>
            </example>

            <para>
            This command can also be used to read back the current value of a port, in a binary format:
            </para>
            <example id="sw_eg_gpio_bitset_read"><title>&gpio; bit set, binary read back</title>
            <programlisting>&lt; GBAxxxxxxxxBxxxxxxxx
&gt; GBA01000001B10000011</programlisting>
            </example>
        </sect2>
    </sect1>

    <sect1 id="sw_spi">
        <title>&spi; Protocol</title>
        <sect2 id="sw_spi_config">
            <title>&spi; Configuration</title>
            <para>
            The &spi; configuration command can set a series of parameters:
            the operation mode, the data order and the clock frequency.
            </para>

            <programlisting>SC&lt;m&gt;&lt;o&gt;&lt;dd&gt;</programlisting>
            <variablelist>
                <varlistentry>
                    <term><filename>SC</filename></term>
                    <listitem>
                        <para>
                        Start of a &spi; configuration command.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>&lt;m&gt;</filename></term>
                    <listitem>
                        <para>
                        The &spi; mode. See <xref linkend="tbl_spi_mode"/> for possible values of this parameter.
                        </para>
                        <table id="tbl_spi_mode"><title>&spi; mode</title>
                            <tgroup cols='3' align='left' colsep='0' rowsep='0'>
                                <colspec colnum="1" colname="col1" colwidth="1*"/>
                                <colspec colnum="2" colname="col2" colwidth="2*"/>
                                <colspec colnum="3" colname="col3" colwidth="2*"/>
                                <thead>
                                    <row>
                                        <entry>SPI Mode</entry>
                                        <entry>Shift SCK-edge</entry>
                                        <entry>Capture SCK-edge</entry>
                                    </row>
                                </thead>
                                <tbody>
                                    <row>
                                        <entry>0</entry>
                                        <entry>Falling</entry>
                                        <entry>Rising</entry>
                                    </row>
                                    <row>
                                        <entry>1</entry>
                                        <entry>Rising</entry>
                                        <entry>Falling</entry>
                                    </row>
                                    <row>
                                        <entry>2</entry>
                                        <entry>Rising</entry>
                                        <entry>Falling</entry>
                                    </row>
                                    <row>
                                        <entry>3</entry>
                                        <entry>Falling</entry>
                                        <entry>Rising</entry>
                                    </row>
                                </tbody>
                            </tgroup>
                        </table>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>&lt;o&gt;</filename></term>
                    <listitem>
                        <para>
                        When this value is set to '<command>L</command>', the LSB of the data word is transmitted first.
                        When this value is set to '<command>M</command>', the MSB of the data word is transmitted first.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>&lt;dd&gt;</filename></term>
                    <listitem>
                        <para>
                        The frequency of the &spi; clock rate in kHz, expressed as a hexadecimal number.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>

            <para>
            The reply to this command is the effective setting of the &spi; interface.
            </para>

            <example id="sw_eg_spi_cfg"><title>&spi; configuration</title>
            <programlisting>&lt; SC0L1007
&gt; SC0L1000</programlisting>
            </example>
        </sect2>

        <sect2 id="sw_spi_write">
            <title>&spi; Reads and Writes</title>
            <para>
            Data are written to the &spi; bus with the write command. It has the following form:
            the operation mode, the data order and the clock frequency.
            </para>

            <programlisting>SW[H|L]&lt;dd&gt;[&lt;dd&gt;&hellip;]</programlisting>
            <variablelist>
                <varlistentry>
                    <term><filename>SW</filename></term>
                    <listitem>
                        <para>
                        Start of a &spi; transfer command.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>[H|L]</filename></term>
                    <listitem>
                        <para>
                        One optional character, either '<command>H</command>' or '<command>L</command>'.
                        This parameter indicates if the &spi; Slave Select line must be toggled during the transfer.
                        If '<command>H</command>', the SS line will be held high during the transfer,
                        if '<command>L</command>', the SS line will be held low.
                        Specify nothing if the SS line should not be changed.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>&lt;dd&gt;[&lt;dd&gt;&hellip;]</filename></term>
                    <listitem>
                        <para>
                        One or more bytes of data to be written to the &spi; slave.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>

            <para>
            The reply to this command is the data read during the transfer.
            </para>

            <example id="sw_eg_spi_wrrd_h"><title>&spi; read and write, with SS line active</title>
            <programlisting>&lt; SWH01020304
&gt; SWA1B2C3D4</programlisting>
            </example>
            <example id="sw_eg_spi_wrrd_x"><title>&spi; read and write, without changing the SS line</title>
            <programlisting>&lt; SW01020304
&gt; SWA1B2C3D4</programlisting>
            </example>
        </sect2>
    </sect1>


    <sect1 id="sw_adc">
        <title>&adc; Protocol</title>

        <sect2 id="sw_adc_config">
            <title>&adc; Configuration</title>
            <para>
            The &adc; device can be configured to use the internal reference voltage,
            or one of the external voltages on AVcc or AREF.
            At startup, &userial; uses the internal reference, 2.56V.
            </para>
            <para>
            To query the current configuration, send the command '<command>AC</command>'.
            The description of a &adc; configuration command is:
            </para>

            <programlisting>AC[&lt;t&gt;&lt;v.vv&gt;]</programlisting>
            <variablelist>
                <varlistentry>
                    <term><filename>AC</filename></term>
                    <listitem>
                        <para>
                        &adc; config command.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>&lt;t&gt;</filename></term>
                    <listitem>
                        <para>
                        The type of voltage reference:
                        </para>
                        <table id="tbl_adc_volref"><title>&adc; voltage reference type</title>
                            <tgroup cols='2' align='left' colsep='0' rowsep='0'>
                                <colspec colnum="1" colname="col1" colwidth="1*"/>
                                <colspec colnum="2" colname="col2" colwidth="8*"/>
                                <thead>
                                    <row>
                                        <entry>Type</entry>
                                        <entry>Description</entry>
                                    </row>
                                </thead>
                                <tbody>
                                    <row>
                                        <entry>'<command>I</command>'</entry>
                                        <entry>Internal 2.56V Voltage Reference with external capacitor on AREF pin</entry>
                                    </row>
                                    <row>
                                        <entry>'<command>C</command>'</entry>
                                        <entry>AVcc with external capacitor on AREF pin</entry>
                                    </row>
                                    <row>
                                        <entry>'<command>F</command>'</entry>
                                        <entry>AREF, Internal Vref turned off</entry>
                                    </row>
                                </tbody>
                            </tgroup>
                        </table>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>&lt;v.vv&gt;</filename></term>
                    <listitem>
                        <para>
                        The actual voltage reference.
                        This value is used to calculate the voltage for the '<command>AV</command>' command.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>

            <para>
            The reply to this command is the string "AC", followed by the &adc; configuration.
            </para>

            <example id="sw_eg_adc_config"><title>&adc; configuration to AREF reference, 3.3V</title>
            <programlisting>&lt; ACF3.30
&gt; ACF3.30</programlisting>
            </example>
        </sect2>

        <sect2 id="sw_adc_read">
            <title>&adc; Readback</title>
            <para>
            The &adc; peripheral can be used directly without initialisation.
            The only parameter the 
            </para>

            <programlisting>AR&lt;c&gt;</programlisting>
            <variablelist>
                <varlistentry>
                    <term><filename>AR</filename></term>
                    <listitem>
                        <para>
                        Start of an &adc; read command.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>&lt;c&gt;</filename></term>
                    <listitem>
                        <para>
                        The ADC channel.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>

            <para>
            The reply to this command is the string "AR", followed by the &adc; value in headecimal format.
            </para>

            <example id="sw_eg_adc_read"><title>&adc; read from channel 0</title>
            <programlisting>&lt; ADR0
&gt; AR0167</programlisting>
            </example>
        </sect2>

        <sect2 id="sw_adc_volt">
            <title>&adc; Readback in Volts</title>
            <para>
            This command is actually the same as the previous &adc; read command.
            The result is given as using the reference voltage given in the &adc; config.
            </para>

            <programlisting>AV&lt;c&gt;</programlisting>
            <variablelist>
                <varlistentry>
                    <term><filename>AV</filename></term>
                    <listitem>
                        <para>
                        Start of an &adc; Voltage read command.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>&lt;c&gt;</filename></term>
                    <listitem>
                        <para>
                        The ADC channel.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>

            <para>
            The reply to this command is the string "AV", followed by the voltage in decimal.
            </para>

            <example id="sw_eg_adc_voltage"><title>&adc; read Voltage from channel 0</title>
            <programlisting>&lt; ADV0
&gt; AV1.1569</programlisting>
            </example>
        </sect2>
    </sect1>


<!--
    <sect1 id="sw_uart">
        <title>&uart; Protocol</title>

        <sect2 id="sw_uart_config">
            <title>&uart; Configuration</title>
            <para>
            To query the current configuration, just send the command '<command>UC</command>'.
            The description of a &uart; configuration command is:
            </para>

            <programlisting>UC[&lt;bb&gt;B&lt;d&gt;&lt;p&gt;&lt;s&gt;]</programlisting>
            <variablelist>
                <varlistentry>
                    <term><filename>UC</filename></term>
                    <listitem>
                        <para>
                        Start of a &uart; configuration command.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>&lt;bb&gt;</filename></term>
                    <listitem>
                        <para>
                        The baud rate of the &uart; clock rate in kHz, expressed as a hexadecimal number.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </sect2>
    </sect1>
-->


    <sect1 id="sw_comment">
        <title>Comments</title>
        <para>
        Lines that start with '<command>#</command>' are comments and all
        characters until the end of line are ignored.
        This is useful when working with batch files that are sent to &userial;.
        </para>
    </sect1>

</chapter>
